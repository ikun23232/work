<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kgc.dao.OrderDao">
    <update id="delOrderProductByOrderId">
        update easybuy_order_detail
        set isDel=1
        where orderId = #{orderId}
    </update>
    <select id="getOrderProductByUserId" resultType="Product">
        SELECT p.id,
               p.name,
               p.stock,
               p.description,
               p.price,
               p.categoryLevelId,
               f.filePath,
               p.stock,
               od.cost
        FROM easybuy_product p,
             easybuy_order_detail od,
             easybuy_order o,
             easybuy_file f
        WHERE o.id = od.orderId
          AND p.id = od.productId
          AND f.id = p.fileId
          AND o.userId = #{userId}
    </select>
    <insert id="addOrderProductByList" parameterType="Order">
        <selectKey resultType="int" keyProperty="id" order="BEFORE">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into easybuy_order(userId, loginName, userAddress, createTime, cost)
        values (#{id}, #{loginName}, #{userAddress}, NOW(), cost)
    </insert>
    <insert id="addOrder" keyProperty="id" useGeneratedKeys="true">
        insert into easybuy_order(userId, loginName, userAddress, createTime, cost, isDel, serialNumber, addressId)
        values (#{userId}, #{loginName}, #{userAddress}, NOW(), #{cost}, 0, #{serialNumber}, #{id});
    </insert>
    <insert id="addOrderProductBytwo">
        insert into easybuy_order_detail(orderId, productId, quantity, cost, createTime)
        values (#{orderId}, #{productId}, #{quantity}, #{cost}, NOW());
    </insert>

    <update id="delOrder">
        update easybuy_order
        set isDel=1
        where id = #{id}
    </update>
    <update id="updateStatusById">
        update easybuy_order
        set status=1
        where serialNumber = #{serialNumber}
    </update>
    <update id="updateOrderByContail">
        update easybuy_order
        set cost=#{cost}
        where id = #{id}
    </update>
    <update id="updateOrderDetailByProductId">
        update easybuy_order_detail
        set quantity=#{quantity}
        where productId = #{productId}
          and orderId = #{orderId}
    </update>
    <select id="getProductListByOrderId" resultType="Product">
        SELECT p.id,
               p.name,
               p.stock,
               p.description,
               p.price,
               p.categoryLevelId,
               f.filePath,
               p.stock,
               od.cost,
               od.quantity
        FROM easybuy_product p,
             easybuy_order_detail od,
             easybuy_order o,
             easybuy_file f
        WHERE o.id = od.orderId
          AND p.id = od.productId
          AND f.id = p.fileId
          AND o.userId = #{userId}
          AND od.orderId = #{orderId}
    </select>

    <select id="getProductListByserialNumber" resultType="com.kgc.entity.Product">
        SELECT p.id,
               p.name,
               p.stock,
               p.description,
               p.price,
               p.categoryLevelId,
               f.filePath,
               p.stock,
               od.cost,
               od.quantity
        FROM easybuy_product p,
             easybuy_order_detail od,
             easybuy_order o,
             easybuy_file f
        WHERE o.id = od.orderId
          AND p.id = od.productId
          AND f.id = p.fileId
          AND o.userId = #{userId}
          AND o.serialNumber = #{serialNumber}
    </select>
    <select id="getOrderById" resultType="com.kgc.entity.Order">
        select id,
               userId,
               loginName,
               userAddress,
               createTime,
               cost,
               serialNumber,
               isDel,
               status
        from easybuy_order
        where id = #{id}
    </select>
    <select id="getOrderListByUserId" resultType="com.kgc.entity.Order">
        select id,
               userId,
               loginName,
               userAddress,
               createTime,
               cost,
               serialNumber,
               isDel,
               status
        from easybuy_order
        where isDel = 0
          and userId = #{userId}
        order by createTime DESC
    </select>
    <select id="getOrderListByALL" resultType="Order">
        select o.id,
               o.userId,
               o.loginName,
               userAddress,
               o.createTime,
               cost,
               serialNumber,
               o.isDel,
               o.status,
               r.id
        from easybuy_order o,
             easybuy_role r,
             easybuy_user u
        WHERE o.userId = u.id
          AND r.id = u.roleId
          AND r.id >= #{roleId}
          and o.isDel = 0
        order by o.createTime DESC
    </select>
    <select id="getOrderListInPay" resultType="Order">
        SELECT id, userId, loginName, userAddress, createTime, cost, serialNumber, isDel, status from easybuy_order
        where isDel=0 and status=0
        <if test="userId>0">
            AND userId=#{userId}
        </if>
    </select>
    <select id="getOrderListInPayByALL" resultType="Order">
        SELECT id,
               userId,
               loginName,
               userAddress,
               createTime,
               cost,
               serialNumber,
               isDel,
               status
        from easybuy_order
        where isDel = 0
          and status = 0
    </select>


</mapper>